// Generated by CoffeeScript 1.12.5
(function() {
  var child_process, curlRunning, encrypt, local, localReady, runCurl, server, serverReady;

  encrypt = require("./encrypt");

  child_process = require('child_process');

  local = child_process.spawn('bin/sslocal', []);

  server = child_process.spawn('bin/ssserver', []);

  curlRunning = false;

  local.on('exit', function(code) {
    server.kill();
    if (!curlRunning) {
      return process.exit(code);
    }
  });

  server.on('exit', function(code) {
    local.kill();
    if (!curlRunning) {
      return process.exit(code);
    }
  });

  localReady = false;

  serverReady = false;

  curlRunning = false;

  runCurl = function() {
    var curl;
    curlRunning = true;
    curl = child_process.spawn('curl', ['-v', 'http://www.example.com/', '-L', '--socks5-hostname', '127.0.0.1:1080']);
    curl.on('exit', function(code) {
      local.kill();
      server.kill();
      if (code === 0) {
        console.log('Test passed');
        return process.exit(0);
      } else {
        console.error('Test failed');
        return process.exit(code);
      }
    });
    curl.stdout.on('data', function(data) {
      return process.stdout.write(data);
    });
    return curl.stderr.on('data', function(data) {
      return process.stderr.write(data);
    });
  };

  local.stderr.on('data', function(data) {
    return process.stderr.write(data);
  });

  server.stderr.on('data', function(data) {
    return process.stderr.write(data);
  });

  local.stdout.on('data', function(data) {
    process.stdout.write(data);
    if (data.toString().indexOf('listening at') >= 0) {
      localReady = true;
      if (localReady && serverReady && !curlRunning) {
        return runCurl();
      }
    }
  });

  server.stdout.on('data', function(data) {
    process.stdout.write(data);
    if (data.toString().indexOf('listening at') >= 0) {
      serverReady = true;
      if (localReady && serverReady && !curlRunning) {
        return runCurl();
      }
    }
  });

}).call(this);
